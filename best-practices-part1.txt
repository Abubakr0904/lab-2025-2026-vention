<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>.NET Best Practices - Vention Lab</title>
<link rel="stylesheet" href="styles.css">
</head>
<body>
<div class="slide-container">

    <!-- Slide 1: Title -->
    <div class="slide active title-slide">
        <div>
            <h1>.NET Best Practices Training</h1>
            <h2>Logging, Configuration, Error Handling & Documentation</h2>
            
            <div style="margin-top: 3vh; font-size: clamp(14px, 2vh, 20px); line-height: 1.8;">
                <p><strong>üìö Key Learning Areas:</strong></p>
                <p style="margin-top: 1vh;">‚úì Professional logging and observability</p>
                <p>‚úì Secure and flexible configuration management</p>
                <p>‚úì Robust error handling strategies</p>
                <p>‚úì Comprehensive documentation practices</p>
            </div>
            <div class="info-box" style="margin-top: 3vh;">
                <strong>Training Duration:</strong> ~120 minutes | <strong>Level:</strong> Junior to Mid-Level
            </div>
            <p style="margin-top: 2.5vh; font-size: clamp(14px, 1.8vh, 18px); color: #e0e0e0;">
                <strong>üë®‚Äçüè´ Instructor:</strong> Abubakr Bakhromov
            </p>
            <p style="margin-top: 2vh; font-size: clamp(12px, 1.6vh, 16px);">
                üìò Primary Reference: <a href="https://docs.microsoft.com/dotnet/architecture/" target="_blank" style="color: #e0e0e0; border-bottom: 1px dotted #e0e0e0;">Microsoft Architecture Guides</a>
            </p>
        </div>
    </div>

    <!-- Slide 2: Introduction to .NET Best Practices -->
    <div class="slide">
        <div class="content">
            <h2>Introduction to .NET Best Practices</h2>
            
            <h3>What Are "Best Practices"?</h3>
            <p>Best practices are proven, professional approaches to writing code that prioritize:</p>
            <ul>
                <li><strong>Coding Discipline:</strong> Consistent, readable, and maintainable code</li>
                <li><strong>Scalability:</strong> Systems that grow gracefully under load</li>
                <li><strong>Maintainability:</strong> Easy to understand, modify, and extend</li>
                <li><strong>Observability:</strong> Ability to monitor, debug, and diagnose issues</li>
            </ul>

            <div class="info-box" style="margin-top: 2vh;">
                <strong>üí° Key Principle:</strong> Best practices transform good code into production-ready, enterprise-grade software.
            </div>

            <div class="why-section" style="margin-top: 1.5vh;">
                <strong>üéØ Why This Matters:</strong> Following best practices reduces technical debt, improves team productivity, and ensures your software can survive in production for years.
            </div>
            
            <p class="reference">üìò <a href="https://docs.microsoft.com/dotnet/architecture/modern-web-apps-azure/architectural-principles" target="_blank">Architectural Principles</a></p>
        </div>
    </div>

    <!-- Slide 3: Purpose of This Lecture -->
    <div class="slide">
        <div class="content">
            <h2>Purpose of This Lecture</h2>
            
            <h3>What You Will Learn</h3>
            <p>This training will teach you how professional .NET developers handle critical production concerns:</p>

            <div style="margin-top: 2vh;">
                <p><strong>1. Logging:</strong> Capture meaningful runtime information for debugging and monitoring</p>
                <p style="margin-top: 1vh;"><strong>2. Configuration:</strong> Manage settings safely across environments</p>
                <p style="margin-top: 1vh;"><strong>3. Error Handling:</strong> Build resilient systems that gracefully recover from failures</p>
                <p style="margin-top: 1vh;"><strong>4. Documentation:</strong> Create and maintain docs that accelerate team productivity</p>
            </div>

            <div class="hint" style="margin-top: 2vh;">
                <strong>üí° Target Outcome:</strong> By the end of this training, you'll be able to implement production-grade patterns used by senior engineers in large-scale systems.
            </div>

            <p class="reference">üìò <a href="https://docs.microsoft.com/dotnet/architecture/" target="_blank">Microsoft .NET Architecture Guides</a></p>
        </div>
    </div>

    <!-- Slide 4: Overview of the Four Pillars -->
    <div class="slide">
        <div class="content">
            <h2>Overview of the Four Pillars</h2>
            
            <h3>The Four Interconnected Areas</h3>

            <table class="table" style="margin-top: 1.5vh;">
                <tr>
                    <th style="width: 25%;">Pillar</th>
                    <th style="width: 40%;">Purpose</th>
                    <th style="width: 35%;">Key Benefit</th>
                </tr>
                <tr>
                    <td><strong>Logging</strong></td>
                    <td>Capture runtime behavior</td>
                    <td>Observability & debugging</td>
                </tr>
                <tr>
                    <td><strong>Configuration</strong></td>
                    <td>Manage settings externally</td>
                    <td>Flexibility & portability</td>
                </tr>
                <tr>
                    <td><strong>Error Handling</strong></td>
                    <td>Gracefully handle failures</td>
                    <td>Stability & recovery</td>
                </tr>
                <tr>
                    <td><strong>Documentation</strong></td>
                    <td>Share knowledge effectively</td>
                    <td>Maintainability & onboarding</td>
                </tr>
            </table>

            <div class="why-section" style="margin-top: 2vh;">
                <strong>üéØ How They Interconnect:</strong> When an error occurs (Error Handling), you need logs (Logging) to diagnose it. Logs reference configuration values (Configuration), and documentation (Documentation) explains the system's behavior.
            </div>
        </div>
    </div>

    <!-- Slide 5: Why These Topics Matter -->
    <div class="slide">
        <div class="content">
            <h2>Why These Topics Matter</h2>
            
            <h3>The Cost of Poor Practices</h3>

            <div class="warning" style="margin-top: 1.5vh;">
                <strong>‚ö†Ô∏è Real Consequences:</strong>
                <ul style="margin-top: 1vh;">
                    <li><strong>Poor Logging:</strong> Production bugs take days to diagnose instead of minutes</li>
                    <li><strong>Hardcoded Config:</strong> Deploying to a new environment requires code changes</li>
                    <li><strong>Bad Error Handling:</strong> Silent failures corrupt data without anyone noticing</li>
                    <li><strong>Missing Docs:</strong> New team members take weeks to become productive</li>
                </ul>
            </div>

            <div class="info-box" style="margin-top: 2vh;">
                <strong>‚úÖ Benefits of Best Practices:</strong>
                <ul style="margin-top: 1vh;">
                    <li>Reduce mean time to recovery (MTTR) by 10x</li>
                    <li>Deploy confidently to multiple environments</li>
                    <li>Prevent catastrophic data loss</li>
                    <li>Onboard new developers in days, not weeks</li>
                </ul>
            </div>

            <p style="margin-top: 2vh; font-style: italic; color: #666;">"Good practices pay for themselves within weeks. Bad practices compound debt for years."</p>
        </div>
    </div>

    <!-- Slide 6: Real-World Scenario -->
    <div class="slide">
        <div class="content">
            <h2>Real-World Scenario: Production Failure</h2>
            
            <h3>Case Study: The Silent Payment Bug</h3>

            <div class="code-block"><span class="code-comment">// Production code (BAD example)</span>
<span class="code-keyword">try</span>
{
    ProcessPayment(order);
}
<span class="code-keyword">catch</span> { }  <span class="code-comment">// Silent failure!</span></div>

            <h3 style="margin-top: 2vh;">What Went Wrong</h3>
            <p><strong>1. No Logging:</strong> Payment failures weren't logged anywhere</p>
            <p><strong>2. Hardcoded Config:</strong> Payment gateway URL was hardcoded to staging</p>
            <p><strong>3. Poor Error Handling:</strong> Exceptions swallowed silently</p>
            <p><strong>4. No Documentation:</strong> No one knew how the payment flow worked</p>

            <div class="warning" style="margin-top: 2vh;">
                <strong>‚ö†Ô∏è Impact:</strong> Company lost $50,000 in failed payments over 3 days before discovering the issue. Customers received goods but weren't charged.
            </div>

            <div class="hint" style="margin-top: 1.5vh;">
                <strong>üí° The Fix:</strong> Implementing the four pillars would have caught this bug in staging or within minutes of production deployment.
            </div>
        </div>
    </div>

    <!-- Slide 7: Section 1 ‚Äì Logging Basics -->
    <div class="slide">
        <div class="content">
            <h2 style="text-align: center; color: #0056b3; margin-top: 5vh;">Section 1: Logging Basics</h2>
            <h2 style="text-align: center; margin-top: 2vh;">The Foundation of Observability</h2>

            <div style="text-align: center; margin-top: 4vh; font-size: clamp(16px, 2.2vh, 24px);">
                <p>In this section, you'll learn:</p>
                <ul style="list-style: none; margin-top: 2vh; line-height: 2;">
                    <li>‚úì What logging is and why it's critical</li>
                    <li>‚úì Logging levels and when to use them</li>
                    <li>‚úì Structured logging vs. string logs</li>
                    <li>‚úì Best practices and common mistakes</li>
                    <li>‚úì Centralized logging and correlation IDs</li>
                </ul>
            </div>

            <div class="info-box" style="margin-top: 4vh;">
                <strong>Key Takeaway:</strong> Proper logging is your application's "black box recorder" ‚Äì essential for production debugging and monitoring.
            </div>
        </div>
    </div>

    <!-- Slide 8: What Is Logging? -->
    <div class="slide">
        <div class="content">
            <h2>What Is Logging?</h2>
            
            <h3>Definition</h3>
            <p><strong>Logging</strong> is the practice of capturing runtime information about your application's behavior to enable debugging, monitoring, auditing, and security compliance.</p>

            <h3 style="margin-top: 2vh;">What Gets Logged?</h3>
            <ul>
                <li><strong>Events:</strong> User login, order placed, payment processed</li>
                <li><strong>Errors:</strong> Exceptions, validation failures, integration errors</li>
                <li><strong>Performance:</strong> Request duration, database query time</li>
                <li><strong>Diagnostics:</strong> Variable values, state transitions, external API responses</li>
            </ul>

            <div class="info-box" style="margin-top: 2vh;">
                <strong>‚ÑπÔ∏è Log vs Metrics vs Traces:</strong>
                <ul style="margin-top: 1vh;">
                    <li><strong>Logs:</strong> Discrete events with context (what happened)</li>
                    <li><strong>Metrics:</strong> Numerical measurements (how many, how fast)</li>
                    <li><strong>Traces:</strong> Request flows across services (how it flowed)</li>
                </ul>
            </div>

            <p class="reference">üìò <a href="https://docs.microsoft.com/dotnet/core/extensions/logging" target="_blank">Logging in .NET</a></p>
        </div>
    </div>

    <!-- Slide 9: Goals of Logging -->
    <div class="slide">
        <div class="content">
            <h2>Goals of Logging</h2>
            
            <h3>Four Primary Goals</h3>

            <div style="margin-top: 2vh;">
                <p><strong>1. Visibility</strong></p>
                <p style="margin-left: 2vw;">Understand what your application is doing at any moment in production</p>
                
                <p style="margin-top: 1.5vh;"><strong>2. Traceability</strong></p>
                <p style="margin-left: 2vw;">Track requests from entry to exit across multiple services</p>
                
                <p style="margin-top: 1.5vh;"><strong>3. Security & Compliance</strong></p>
                <p style="margin-left: 2vw;">Audit who did what and when for regulatory requirements (GDPR, SOX, HIPAA)</p>
                
                <p style="margin-top: 1.5vh;"><strong>4. Troubleshooting</strong></p>
                <p style="margin-left: 2vw;">Diagnose and fix production issues quickly</p>
            </div>

            <div class="hint" style="margin-top: 2vh;">
                <strong>üí° Golden Rule:</strong> If you can't see it in logs, you can't debug it in production.
            </div>

            <div class="why-section" style="margin-top: 1.5vh;">
                <strong>üéØ Why Structured Goals Matter:</strong> Without clear logging goals, teams either log everything (noise) or nothing (blind). A clear strategy ensures logs are useful and actionable.
            </div>
        </div>
    </div>

    <!-- Slide 10: Logging Levels -->
    <div class="slide">
        <div class="content">
            <h2>Logging Levels: The Hierarchy</h2>
            
            <h3>Six Standard Levels</h3>

            <table class="table" style="margin-top: 1.5vh;">
                <tr>
                    <th style="width: 20%;">Level</th>
                    <th style="width: 40%;">Use Case</th>
                    <th style="width: 40%;">Example</th>
                </tr>
                <tr>
                    <td><strong>Trace</strong></td>
                    <td>Very detailed, step-by-step</td>
                    <td>Method entry/exit</td>
                </tr>
                <tr>
                    <td><strong>Debug</strong></td>
                    <td>Detailed development info</td>
                    <td>Variable values, SQL queries</td>
                </tr>
                <tr>
                    <td><strong>Information</strong></td>
                    <td>General app flow events</td>
                    <td>User logged in, order placed</td>
                </tr>
                <tr>
                    <td><strong>Warning</strong></td>
                    <td>Unexpected but recoverable</td>
                    <td>Retry succeeded, deprecated API</td>
                </tr>
                <tr>
                    <td><strong>Error</strong></td>
                    <td>Failure requiring attention</td>
                    <td>Payment failed, DB unavailable</td>
                </tr>
                <tr>
                    <td><strong>Critical</strong></td>
                    <td>Catastrophic failure</td>
                    <td>Application crash, data loss</td>
                </tr>
            </table>

            <div class="info-box" style="margin-top: 2vh;">
                <strong>‚ÑπÔ∏è Production Configuration:</strong> Typically set to <code>Information</code> or <code>Warning</code> to reduce noise. Lower levels (Trace, Debug) only enabled when troubleshooting.
            </div>
        </div>
    </div>

